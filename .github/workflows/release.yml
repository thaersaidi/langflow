name: Langflow Release
run-name: Langflow Release by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      release_package_base:
        description: "Release Langflow Base"
        required: true
        type: boolean
        default: false
      release_package_main:
        description: "Release Langflow"
        required: true
        type: boolean
        default: false
      build_docker_base:
        description: "Build Docker Image for Langflow Base"
        required: true
        type: boolean
        default: false
      build_docker_main:
        description: "Build Docker Image for Langflow"
        required: true
        type: boolean
        default: false
      pre_release:
        description: "Pre-release"
        required: false
        type: boolean
        default: false


env:
  POETRY_VERSION: "1.8.2"

jobs:
  ci:
    if: ${{ github.event.inputs.release_package_base == true || github.event.inputs.release_package_main == true }}
    name: CI
    uses: ./.github/workflows/ci.yml

  release-base:
    name: Release Langflow Base
    needs: [ci]
    if: inputs.release_package_base == true
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check-version.outputs.version }}
      skipped: ${{ steps.check-version.outputs.skipped }}
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"
      - name: Set up Nodejs 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Check Version
        id: check-version
        run: |
          version=$(cd src/backend/base && poetry version --short)
          last_released_version=$(curl -s "https://pypi.org/pypi/langflow-base/json" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)
          if [ "$version" = "$last_released_version" ]; then
            echo "Version $version is already released. Skipping release."
            echo skipped=true >> $GITHUB_OUTPUT
            exit 0
          else
            echo version=$version >> $GITHUB_OUTPUT
            echo skipped=false >> $GITHUB_OUTPUT
          fi
      - name: Build project for distribution
        if: steps.check-version.outputs.skipped == 'false'
        run: make build base=true
      - name: Test CLI
        if: steps.check-version.outputs.skipped == 'false'
        run: |
          python -m pip install src/backend/base/dist/*.whl
          python -m langflow run --host 127.0.0.1 --port 7860 &
          SERVER_PID=$!
          # Wait for the server to start
          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/api/v1/auto_login; do sleep 2; done' || (echo "Server did not start in time" && kill $SERVER_PID && exit 1)
          # Terminate the server
          kill $SERVER_PID || (echo "Failed to terminate the server" && exit 1)
          sleep 10 # give the server some time to terminate
          # Check if the server is still running
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "Failed to terminate the server"
            exit 1
          else
            echo "Server terminated successfully"
          fi
      - name: Publish to PyPI
        if: steps.check-version.outputs.skipped == 'false'
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: make publish base=true
      - name: Upload Artifact
        if: steps.check-version.outputs.skipped == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: dist-base
          path: src/backend/base/dist

  release-main:
    name: Release Langflow Main
    if: inputs.release_package_main == true
    needs: [release-base]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"
      - name: Set up Nodejs 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      # If pre-release is true, we need to check if  ["a", "b", "rc", "dev", "post"] is in the version string
      # if the version string is incorrect, we need to exit the workflow
      - name: Check if pre-release
        if: inputs.pre_release == true
        run: |
          version=$(poetry version --short)
          if [[ "${version}" =~ ^([0-9]+\.)?([0-9]+\.)?[0-9]+((a|b|rc|dev|post)([0-9]+))$ ]]; then
            echo "Pre-release version detected. Continuing with the release."
          else
            echo "Invalid pre-release version detected. Exiting the workflow."
            exit 1
          fi
      - name: Check Version
        id: check-version
        run: |
          version=$(poetry version --short)
          last_released_version=$(curl -s "https://pypi.org/pypi/langflow/json" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)
          if [ "$version" = "$last_released_version" ]; then
            echo "Version $version is already released. Skipping release."
            exit 1
          else
            echo version=$version >> $GITHUB_OUTPUT
          fi
      - name: Wait for PyPI Propagation
        if: needs.release-base.outputs.skipped == 'false'
        run: sleep 300  # wait for 5 minutes to ensure PyPI propagation

      - name: Build project for distribution
        run: make build main=true
      - name: Test CLI
        run: |
          python -m pip install dist/*.whl
          python -m langflow run --host 127.0.0.1 --port 7860 --backend-only &
          SERVER_PID=$!
          # Wait for the server to start
          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/health_check; do sleep 2; done' || (echo "Server did not start in time" && kill $SERVER_PID && exit 1)
          # Terminate the server
          kill $SERVER_PID || (echo "Failed to terminate the server" && exit 1)
          sleep 10 # give the server some time to terminate
          # Check if the server is still running
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "Failed to terminate the server"
            exit 1
          else
            echo "Server terminated successfully"
          fi
      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: make publish main=true
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-main
          path: dist

  call_docker_build_base:
    name: Call Docker Build Workflow for Langflow Base
    if : inputs.build_docker_base == true
    uses: ./.github/workflows/docker-build.yml
    strategy:
      matrix:
        release_type:
          - base
    with:
      # version should be needs.release-base.outputs.version  if release_type is base
      # version should be needs.release-main.outputs.version  if release_type is main
      version: ''
      release_type: ${{ matrix.release_type }}
      pre_release: ${{ inputs.pre_release }}
    secrets: inherit

  call_docker_build_main:
    name: Call Docker Build Workflow for Langflow
    if : inputs.build_docker_main == true
    uses: ./.github/workflows/docker-build.yml
    strategy:
      matrix:
        release_type:
          - main
    with:
      # version should be needs.release-base.outputs.version  if release_type is base
      # version should be needs.release-main.outputs.version  if release_type is main
      version: ''
      release_type: ${{ matrix.release_type }}
      pre_release: ${{ inputs.pre_release }}
    secrets: inherit

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: release-main
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist-main
          path: dist
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          generateReleaseNotes: true
          prerelease: ${{ inputs.pre_release }}
          tag: v${{ needs.release-main.outputs.version }}
          commit: ${{ github.ref }}